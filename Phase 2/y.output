Terminals unused in grammar

    CONST


Grammar

    0 $accept: start $end

    1 start: start build
    2      | build

    3 build: function
    4      | declaration

    5 function: type IDENTIFIER '(' arg_list ')' compound_stmt

    6 type: data_type pointer
    7     | data_type

    8 pointer: '*' pointer
    9        | '*'

   10 data_type: sign_spec type_spec
   11          | type_spec

   12 sign_spec: SIGNED
   13          | UNSIGNED

   14 type_spec: INT
   15          | SHORT INT
   16          | SHORT
   17          | LONG
   18          | LONG_LONG
   19          | LONG INT
   20          | LONG_LONG INT
   21          | FLOAT
   22          | CHAR
   23          | DOUBLE
   24          | LONG FLOAT
   25          | LONG_LONG FLOAT

   26 arg_list: arguments
   27         | ε

   28 arguments: arguments ',' arg
   29          | arg

   30 arg: type IDENTIFIER

   31 stmt: compound_stmt
   32     | single_stmt

   33 compound_stmt: '{' statements '}'

   34 statements: statements stmt
   35           | ε

   36 single_stmt: if_block
   37            | for_loop
   38            | while_loop
   39            | declaration
   40            | function_call ';'
   41            | RETURN ';'
   42            | CONTINUE ';'
   43            | BREAK ';'
   44            | RETURN sub_expr ';'

   45 for_loop: FOR '(' expression_stmt expression_stmt ')' stmt
   46         | FOR '(' expression_stmt expression_stmt expression ')' stmt

   47 if_block: IF '(' expression ')' stmt
   48         | IF '(' expression ')' stmt ELSE stmt

   49 while_loop: WHILE '(' expression ')' stmt

   50 declaration: type declaration_list ';'
   51            | declaration_list ';'
   52            | unary_expr ';'

   53 declaration_list: declaration_list ',' sub_decl
   54                 | sub_decl

   55 sub_decl: assignment_expr
   56         | IDENTIFIER
   57         | array_index

   58 expression_stmt: expression ';'
   59                | ';'

   60 expression: expression ',' sub_expr
   61           | sub_expr

   62 sub_expr: sub_expr '>' sub_expr
   63         | sub_expr '<' sub_expr
   64         | sub_expr EQ sub_expr
   65         | sub_expr NOT_EQ sub_expr
   66         | sub_expr LESS_THAN_EQ sub_expr
   67         | sub_expr GR_THAN_EQ sub_expr
   68         | sub_expr LOGICAL_AND sub_expr
   69         | sub_expr LOGICAL_OR sub_expr
   70         | '!' sub_expr
   71         | arithmetic_expr
   72         | assignment_expr
   73         | unary_expr

   74 assignment_expr: lhs assign_op arithmetic_expr
   75                | lhs assign_op array_index
   76                | lhs assign_op function_call
   77                | lhs assign_op unary_expr
   78                | unary_expr assign_op unary_expr

   79 unary_expr: lhs INCREMENT
   80           | lhs DECREMENT
   81           | DECREMENT lhs
   82           | INCREMENT lhs

   83 lhs: IDENTIFIER

   84 assign_op: '='
   85          | PLUS_ASSIGN
   86          | MINUS_ASSIGN
   87          | MUL_ASSIGN
   88          | DIV_ASSIGN
   89          | MOD_ASSIGN

   90 arithmetic_expr: arithmetic_expr '+' arithmetic_expr
   91                | arithmetic_expr '-' arithmetic_expr
   92                | arithmetic_expr '*' arithmetic_expr
   93                | arithmetic_expr '/' arithmetic_expr
   94                | arithmetic_expr '%' arithmetic_expr
   95                | '(' arithmetic_expr ')'
   96                | '-' arithmetic_expr
   97                | IDENTIFIER
   98                | constant

   99 constant: DEC_CONSTANT
  100         | HEX_CONSTANT

  101 array_index: IDENTIFIER '[' sub_expr ']'

  102 function_call: IDENTIFIER '(' parameter_list ')'
  103              | IDENTIFIER '(' ')'

  104 parameter_list: parameter_list ',' parameter
  105               | parameter

  106 parameter: sub_expr
  107          | STRING


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 70
    '%' (37) 94
    '(' (40) 5 45 46 47 48 49 95 102 103
    ')' (41) 5 45 46 47 48 49 95 102 103
    '*' (42) 8 9 92
    '+' (43) 90
    ',' (44) 28 53 60 104
    '-' (45) 91 96
    '/' (47) 93
    ';' (59) 40 41 42 43 44 50 51 52 58 59
    '<' (60) 63
    '=' (61) 84
    '>' (62) 62
    '[' (91) 101
    ']' (93) 101
    '{' (123) 33
    '}' (125) 33
    error (256)
    IDENTIFIER <entry> (258) 5 30 56 83 97 101 102 103
    DEC_CONSTANT <dval> (259) 99
    HEX_CONSTANT <dval> (260) 100
    STRING (261) 107
    SHORT (262) 15 16
    INT (263) 14 15 19 20
    LONG (264) 17 19 24
    LONG_LONG (265) 18 20 25
    FLOAT (266) 21 24 25
    DOUBLE (267) 23
    CHAR (268) 22
    SIGNED (269) 12
    UNSIGNED (270) 13
    CONST (271)
    IF (272) 47 48
    FOR (273) 45 46
    WHILE (274) 49
    CONTINUE (275) 42
    BREAK (276) 43
    RETURN (277) 41 44
    LOGICAL_AND (278) 68
    LOGICAL_OR (279) 69
    LESS_THAN_EQ (280) 66
    GR_THAN_EQ (281) 67
    EQ (282) 64
    NOT_EQ (283) 65
    INCREMENT (284) 79 82
    DECREMENT (285) 80 81
    MUL_ASSIGN (286) 87
    DIV_ASSIGN (287) 88
    MOD_ASSIGN (288) 89
    PLUS_ASSIGN (289) 85
    MINUS_ASSIGN (290) 86
    UMINUS (291)
    LOWER_THAN_ELSE (292)
    ELSE (293) 48


Nonterminals, with rules where they appear

    $accept (56)
        on left: 0
    start (57)
        on left: 1 2
        on right: 0 1
    build (58)
        on left: 3 4
        on right: 1 2
    function (59)
        on left: 5
        on right: 3
    type (60)
        on left: 6 7
        on right: 5 30 50
    pointer (61)
        on left: 8 9
        on right: 6 8
    data_type (62)
        on left: 10 11
        on right: 6 7
    sign_spec (63)
        on left: 12 13
        on right: 10
    type_spec (64)
        on left: 14 15 16 17 18 19 20 21 22 23 24 25
        on right: 10 11
    arg_list (65)
        on left: 26 27
        on right: 5
    arguments (66)
        on left: 28 29
        on right: 26 28
    arg (67)
        on left: 30
        on right: 28 29
    stmt (68)
        on left: 31 32
        on right: 34 45 46 47 48 49
    compound_stmt (69)
        on left: 33
        on right: 5 31
    statements (70)
        on left: 34 35
        on right: 33 34
    single_stmt (71)
        on left: 36 37 38 39 40 41 42 43 44
        on right: 32
    for_loop (72)
        on left: 45 46
        on right: 37
    if_block (73)
        on left: 47 48
        on right: 36
    while_loop (74)
        on left: 49
        on right: 38
    declaration (75)
        on left: 50 51 52
        on right: 4 39
    declaration_list (76)
        on left: 53 54
        on right: 50 51 53
    sub_decl (77)
        on left: 55 56 57
        on right: 53 54
    expression_stmt (78)
        on left: 58 59
        on right: 45 46
    expression <dval> (79)
        on left: 60 61
        on right: 46 47 48 49 58 60
    sub_expr <dval> (80)
        on left: 62 63 64 65 66 67 68 69 70 71 72 73
        on right: 44 60 61 62 63 64 65 66 67 68 69 70 101 106
    assignment_expr <dval> (81)
        on left: 74 75 76 77 78
        on right: 55 72
    unary_expr <dval> (82)
        on left: 79 80 81 82
        on right: 52 73 77 78
    lhs <entry> (83)
        on left: 83
        on right: 74 75 76 77 79 80 81 82
    assign_op <ival> (84)
        on left: 84 85 86 87 88 89
        on right: 74 75 76 77 78
    arithmetic_expr <dval> (85)
        on left: 90 91 92 93 94 95 96 97 98
        on right: 71 74 90 91 92 93 94 95 96
    constant <dval> (86)
        on left: 99 100
        on right: 98
    array_index (87)
        on left: 101
        on right: 57 75
    function_call (88)
        on left: 102 103
        on right: 40 76
    parameter_list (89)
        on left: 104 105
        on right: 102 104
    parameter (90)
        on left: 106 107
        on right: 104 105


State 0

    0 $accept: • start $end

    IDENTIFIER  shift, and go to state 1
    SHORT       shift, and go to state 2
    INT         shift, and go to state 3
    LONG        shift, and go to state 4
    LONG_LONG   shift, and go to state 5
    FLOAT       shift, and go to state 6
    DOUBLE      shift, and go to state 7
    CHAR        shift, and go to state 8
    SIGNED      shift, and go to state 9
    UNSIGNED    shift, and go to state 10
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12

    start             go to state 13
    build             go to state 14
    function          go to state 15
    type              go to state 16
    data_type         go to state 17
    sign_spec         go to state 18
    type_spec         go to state 19
    declaration       go to state 20
    declaration_list  go to state 21
    sub_decl          go to state 22
    assignment_expr   go to state 23
    unary_expr        go to state 24
    lhs               go to state 25
    array_index       go to state 26


State 1

   56 sub_decl: IDENTIFIER •
   83 lhs: IDENTIFIER •
  101 array_index: IDENTIFIER • '[' sub_expr ']'

    '['  shift, and go to state 27

    ','       reduce using rule 56 (sub_decl)
    ';'       reduce using rule 56 (sub_decl)
    $default  reduce using rule 83 (lhs)


State 2

   15 type_spec: SHORT • INT
   16          | SHORT •

    INT  shift, and go to state 28

    $default  reduce using rule 16 (type_spec)


State 3

   14 type_spec: INT •

    $default  reduce using rule 14 (type_spec)


State 4

   17 type_spec: LONG •
   19          | LONG • INT
   24          | LONG • FLOAT

    INT    shift, and go to state 29
    FLOAT  shift, and go to state 30

    $default  reduce using rule 17 (type_spec)


State 5

   18 type_spec: LONG_LONG •
   20          | LONG_LONG • INT
   25          | LONG_LONG • FLOAT

    INT    shift, and go to state 31
    FLOAT  shift, and go to state 32

    $default  reduce using rule 18 (type_spec)


State 6

   21 type_spec: FLOAT •

    $default  reduce using rule 21 (type_spec)


State 7

   23 type_spec: DOUBLE •

    $default  reduce using rule 23 (type_spec)


State 8

   22 type_spec: CHAR •

    $default  reduce using rule 22 (type_spec)


State 9

   12 sign_spec: SIGNED •

    $default  reduce using rule 12 (sign_spec)


State 10

   13 sign_spec: UNSIGNED •

    $default  reduce using rule 13 (sign_spec)


State 11

   82 unary_expr: INCREMENT • lhs

    IDENTIFIER  shift, and go to state 33

    lhs  go to state 34


State 12

   81 unary_expr: DECREMENT • lhs

    IDENTIFIER  shift, and go to state 33

    lhs  go to state 35


State 13

    0 $accept: start • $end
    1 start: start • build

    $end        shift, and go to state 36
    IDENTIFIER  shift, and go to state 1
    SHORT       shift, and go to state 2
    INT         shift, and go to state 3
    LONG        shift, and go to state 4
    LONG_LONG   shift, and go to state 5
    FLOAT       shift, and go to state 6
    DOUBLE      shift, and go to state 7
    CHAR        shift, and go to state 8
    SIGNED      shift, and go to state 9
    UNSIGNED    shift, and go to state 10
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12

    build             go to state 37
    function          go to state 15
    type              go to state 16
    data_type         go to state 17
    sign_spec         go to state 18
    type_spec         go to state 19
    declaration       go to state 20
    declaration_list  go to state 21
    sub_decl          go to state 22
    assignment_expr   go to state 23
    unary_expr        go to state 24
    lhs               go to state 25
    array_index       go to state 26


State 14

    2 start: build •

    $default  reduce using rule 2 (start)


State 15

    3 build: function •

    $default  reduce using rule 3 (build)


State 16

    5 function: type • IDENTIFIER '(' arg_list ')' compound_stmt
   50 declaration: type • declaration_list ';'

    IDENTIFIER  shift, and go to state 38
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12

    declaration_list  go to state 39
    sub_decl          go to state 22
    assignment_expr   go to state 23
    unary_expr        go to state 40
    lhs               go to state 25
    array_index       go to state 26


State 17

    6 type: data_type • pointer
    7     | data_type •

    '*'  shift, and go to state 41

    $default  reduce using rule 7 (type)

    pointer  go to state 42


State 18

   10 data_type: sign_spec • type_spec

    SHORT      shift, and go to state 2
    INT        shift, and go to state 3
    LONG       shift, and go to state 4
    LONG_LONG  shift, and go to state 5
    FLOAT      shift, and go to state 6
    DOUBLE     shift, and go to state 7
    CHAR       shift, and go to state 8

    type_spec  go to state 43


State 19

   11 data_type: type_spec •

    $default  reduce using rule 11 (data_type)


State 20

    4 build: declaration •

    $default  reduce using rule 4 (build)


State 21

   51 declaration: declaration_list • ';'
   53 declaration_list: declaration_list • ',' sub_decl

    ','  shift, and go to state 44
    ';'  shift, and go to state 45


State 22

   54 declaration_list: sub_decl •

    $default  reduce using rule 54 (declaration_list)


State 23

   55 sub_decl: assignment_expr •

    $default  reduce using rule 55 (sub_decl)


State 24

   52 declaration: unary_expr • ';'
   78 assignment_expr: unary_expr • assign_op unary_expr

    MUL_ASSIGN    shift, and go to state 46
    DIV_ASSIGN    shift, and go to state 47
    MOD_ASSIGN    shift, and go to state 48
    PLUS_ASSIGN   shift, and go to state 49
    MINUS_ASSIGN  shift, and go to state 50
    '='           shift, and go to state 51
    ';'           shift, and go to state 52

    assign_op  go to state 53


State 25

   74 assignment_expr: lhs • assign_op arithmetic_expr
   75                | lhs • assign_op array_index
   76                | lhs • assign_op function_call
   77                | lhs • assign_op unary_expr
   79 unary_expr: lhs • INCREMENT
   80           | lhs • DECREMENT

    INCREMENT     shift, and go to state 54
    DECREMENT     shift, and go to state 55
    MUL_ASSIGN    shift, and go to state 46
    DIV_ASSIGN    shift, and go to state 47
    MOD_ASSIGN    shift, and go to state 48
    PLUS_ASSIGN   shift, and go to state 49
    MINUS_ASSIGN  shift, and go to state 50
    '='           shift, and go to state 51

    assign_op  go to state 56


State 26

   57 sub_decl: array_index •

    $default  reduce using rule 57 (sub_decl)


State 27

  101 array_index: IDENTIFIER '[' • sub_expr ']'

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62

    sub_expr         go to state 63
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67


State 28

   15 type_spec: SHORT INT •

    $default  reduce using rule 15 (type_spec)


State 29

   19 type_spec: LONG INT •

    $default  reduce using rule 19 (type_spec)


State 30

   24 type_spec: LONG FLOAT •

    $default  reduce using rule 24 (type_spec)


State 31

   20 type_spec: LONG_LONG INT •

    $default  reduce using rule 20 (type_spec)


State 32

   25 type_spec: LONG_LONG FLOAT •

    $default  reduce using rule 25 (type_spec)


State 33

   83 lhs: IDENTIFIER •

    $default  reduce using rule 83 (lhs)


State 34

   82 unary_expr: INCREMENT lhs •

    $default  reduce using rule 82 (unary_expr)


State 35

   81 unary_expr: DECREMENT lhs •

    $default  reduce using rule 81 (unary_expr)


State 36

    0 $accept: start $end •

    $default  accept


State 37

    1 start: start build •

    $default  reduce using rule 1 (start)


State 38

    5 function: type IDENTIFIER • '(' arg_list ')' compound_stmt
   56 sub_decl: IDENTIFIER •
   83 lhs: IDENTIFIER •
  101 array_index: IDENTIFIER • '[' sub_expr ']'

    '('  shift, and go to state 68
    '['  shift, and go to state 27

    ','       reduce using rule 56 (sub_decl)
    ';'       reduce using rule 56 (sub_decl)
    $default  reduce using rule 83 (lhs)


State 39

   50 declaration: type declaration_list • ';'
   53 declaration_list: declaration_list • ',' sub_decl

    ','  shift, and go to state 44
    ';'  shift, and go to state 69


State 40

   78 assignment_expr: unary_expr • assign_op unary_expr

    MUL_ASSIGN    shift, and go to state 46
    DIV_ASSIGN    shift, and go to state 47
    MOD_ASSIGN    shift, and go to state 48
    PLUS_ASSIGN   shift, and go to state 49
    MINUS_ASSIGN  shift, and go to state 50
    '='           shift, and go to state 51

    assign_op  go to state 53


State 41

    8 pointer: '*' • pointer
    9        | '*' •

    '*'  shift, and go to state 41

    $default  reduce using rule 9 (pointer)

    pointer  go to state 70


State 42

    6 type: data_type pointer •

    $default  reduce using rule 6 (type)


State 43

   10 data_type: sign_spec type_spec •

    $default  reduce using rule 10 (data_type)


State 44

   53 declaration_list: declaration_list ',' • sub_decl

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12

    sub_decl         go to state 71
    assignment_expr  go to state 23
    unary_expr       go to state 40
    lhs              go to state 25
    array_index      go to state 26


State 45

   51 declaration: declaration_list ';' •

    $default  reduce using rule 51 (declaration)


State 46

   87 assign_op: MUL_ASSIGN •

    $default  reduce using rule 87 (assign_op)


State 47

   88 assign_op: DIV_ASSIGN •

    $default  reduce using rule 88 (assign_op)


State 48

   89 assign_op: MOD_ASSIGN •

    $default  reduce using rule 89 (assign_op)


State 49

   85 assign_op: PLUS_ASSIGN •

    $default  reduce using rule 85 (assign_op)


State 50

   86 assign_op: MINUS_ASSIGN •

    $default  reduce using rule 86 (assign_op)


State 51

   84 assign_op: '=' •

    $default  reduce using rule 84 (assign_op)


State 52

   52 declaration: unary_expr ';' •

    $default  reduce using rule 52 (declaration)


State 53

   78 assignment_expr: unary_expr assign_op • unary_expr

    IDENTIFIER  shift, and go to state 33
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12

    unary_expr  go to state 72
    lhs         go to state 73


State 54

   79 unary_expr: lhs INCREMENT •

    $default  reduce using rule 79 (unary_expr)


State 55

   80 unary_expr: lhs DECREMENT •

    $default  reduce using rule 80 (unary_expr)


State 56

   74 assignment_expr: lhs assign_op • arithmetic_expr
   75                | lhs assign_op • array_index
   76                | lhs assign_op • function_call
   77                | lhs assign_op • unary_expr

    IDENTIFIER    shift, and go to state 74
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '('           shift, and go to state 62

    unary_expr       go to state 75
    lhs              go to state 73
    arithmetic_expr  go to state 76
    constant         go to state 67
    array_index      go to state 77
    function_call    go to state 78


State 57

   83 lhs: IDENTIFIER •
   97 arithmetic_expr: IDENTIFIER •

    INCREMENT     reduce using rule 83 (lhs)
    DECREMENT     reduce using rule 83 (lhs)
    MUL_ASSIGN    reduce using rule 83 (lhs)
    DIV_ASSIGN    reduce using rule 83 (lhs)
    MOD_ASSIGN    reduce using rule 83 (lhs)
    PLUS_ASSIGN   reduce using rule 83 (lhs)
    MINUS_ASSIGN  reduce using rule 83 (lhs)
    '='           reduce using rule 83 (lhs)
    $default      reduce using rule 97 (arithmetic_expr)


State 58

   99 constant: DEC_CONSTANT •

    $default  reduce using rule 99 (constant)


State 59

  100 constant: HEX_CONSTANT •

    $default  reduce using rule 100 (constant)


State 60

   96 arithmetic_expr: '-' • arithmetic_expr

    IDENTIFIER    shift, and go to state 79
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    '-'           shift, and go to state 60
    '('           shift, and go to state 62

    arithmetic_expr  go to state 80
    constant         go to state 67


State 61

   70 sub_expr: '!' • sub_expr

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62

    sub_expr         go to state 81
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67


State 62

   95 arithmetic_expr: '(' • arithmetic_expr ')'

    IDENTIFIER    shift, and go to state 79
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    '-'           shift, and go to state 60
    '('           shift, and go to state 62

    arithmetic_expr  go to state 82
    constant         go to state 67


State 63

   62 sub_expr: sub_expr • '>' sub_expr
   63         | sub_expr • '<' sub_expr
   64         | sub_expr • EQ sub_expr
   65         | sub_expr • NOT_EQ sub_expr
   66         | sub_expr • LESS_THAN_EQ sub_expr
   67         | sub_expr • GR_THAN_EQ sub_expr
   68         | sub_expr • LOGICAL_AND sub_expr
   69         | sub_expr • LOGICAL_OR sub_expr
  101 array_index: IDENTIFIER '[' sub_expr • ']'

    LOGICAL_AND   shift, and go to state 83
    LOGICAL_OR    shift, and go to state 84
    LESS_THAN_EQ  shift, and go to state 85
    GR_THAN_EQ    shift, and go to state 86
    EQ            shift, and go to state 87
    NOT_EQ        shift, and go to state 88
    '<'           shift, and go to state 89
    '>'           shift, and go to state 90
    ']'           shift, and go to state 91


State 64

   72 sub_expr: assignment_expr •

    $default  reduce using rule 72 (sub_expr)


State 65

   73 sub_expr: unary_expr •
   78 assignment_expr: unary_expr • assign_op unary_expr

    MUL_ASSIGN    shift, and go to state 46
    DIV_ASSIGN    shift, and go to state 47
    MOD_ASSIGN    shift, and go to state 48
    PLUS_ASSIGN   shift, and go to state 49
    MINUS_ASSIGN  shift, and go to state 50
    '='           shift, and go to state 51

    $default  reduce using rule 73 (sub_expr)

    assign_op  go to state 53


State 66

   71 sub_expr: arithmetic_expr •
   90 arithmetic_expr: arithmetic_expr • '+' arithmetic_expr
   91                | arithmetic_expr • '-' arithmetic_expr
   92                | arithmetic_expr • '*' arithmetic_expr
   93                | arithmetic_expr • '/' arithmetic_expr
   94                | arithmetic_expr • '%' arithmetic_expr

    '+'  shift, and go to state 92
    '-'  shift, and go to state 93
    '*'  shift, and go to state 94
    '/'  shift, and go to state 95
    '%'  shift, and go to state 96

    $default  reduce using rule 71 (sub_expr)


State 67

   98 arithmetic_expr: constant •

    $default  reduce using rule 98 (arithmetic_expr)


State 68

    5 function: type IDENTIFIER '(' • arg_list ')' compound_stmt

    SHORT      shift, and go to state 2
    INT        shift, and go to state 3
    LONG       shift, and go to state 4
    LONG_LONG  shift, and go to state 5
    FLOAT      shift, and go to state 6
    DOUBLE     shift, and go to state 7
    CHAR       shift, and go to state 8
    SIGNED     shift, and go to state 9
    UNSIGNED   shift, and go to state 10

    $default  reduce using rule 27 (arg_list)

    type       go to state 97
    data_type  go to state 17
    sign_spec  go to state 18
    type_spec  go to state 19
    arg_list   go to state 98
    arguments  go to state 99
    arg        go to state 100


State 69

   50 declaration: type declaration_list ';' •

    $default  reduce using rule 50 (declaration)


State 70

    8 pointer: '*' pointer •

    $default  reduce using rule 8 (pointer)


State 71

   53 declaration_list: declaration_list ',' sub_decl •

    $default  reduce using rule 53 (declaration_list)


State 72

   78 assignment_expr: unary_expr assign_op unary_expr •

    $default  reduce using rule 78 (assignment_expr)


State 73

   79 unary_expr: lhs • INCREMENT
   80           | lhs • DECREMENT

    INCREMENT  shift, and go to state 54
    DECREMENT  shift, and go to state 55


State 74

   83 lhs: IDENTIFIER •
   97 arithmetic_expr: IDENTIFIER •
  101 array_index: IDENTIFIER • '[' sub_expr ']'
  102 function_call: IDENTIFIER • '(' parameter_list ')'
  103              | IDENTIFIER • '(' ')'

    '('  shift, and go to state 101
    '['  shift, and go to state 27

    INCREMENT  reduce using rule 83 (lhs)
    DECREMENT  reduce using rule 83 (lhs)
    $default   reduce using rule 97 (arithmetic_expr)


State 75

   77 assignment_expr: lhs assign_op unary_expr •

    $default  reduce using rule 77 (assignment_expr)


State 76

   74 assignment_expr: lhs assign_op arithmetic_expr •
   90 arithmetic_expr: arithmetic_expr • '+' arithmetic_expr
   91                | arithmetic_expr • '-' arithmetic_expr
   92                | arithmetic_expr • '*' arithmetic_expr
   93                | arithmetic_expr • '/' arithmetic_expr
   94                | arithmetic_expr • '%' arithmetic_expr

    '+'  shift, and go to state 92
    '-'  shift, and go to state 93
    '*'  shift, and go to state 94
    '/'  shift, and go to state 95
    '%'  shift, and go to state 96

    $default  reduce using rule 74 (assignment_expr)


State 77

   75 assignment_expr: lhs assign_op array_index •

    $default  reduce using rule 75 (assignment_expr)


State 78

   76 assignment_expr: lhs assign_op function_call •

    $default  reduce using rule 76 (assignment_expr)


State 79

   97 arithmetic_expr: IDENTIFIER •

    $default  reduce using rule 97 (arithmetic_expr)


State 80

   90 arithmetic_expr: arithmetic_expr • '+' arithmetic_expr
   91                | arithmetic_expr • '-' arithmetic_expr
   92                | arithmetic_expr • '*' arithmetic_expr
   93                | arithmetic_expr • '/' arithmetic_expr
   94                | arithmetic_expr • '%' arithmetic_expr
   96                | '-' arithmetic_expr •

    $default  reduce using rule 96 (arithmetic_expr)


State 81

   62 sub_expr: sub_expr • '>' sub_expr
   63         | sub_expr • '<' sub_expr
   64         | sub_expr • EQ sub_expr
   65         | sub_expr • NOT_EQ sub_expr
   66         | sub_expr • LESS_THAN_EQ sub_expr
   67         | sub_expr • GR_THAN_EQ sub_expr
   68         | sub_expr • LOGICAL_AND sub_expr
   69         | sub_expr • LOGICAL_OR sub_expr
   70         | '!' sub_expr •

    $default  reduce using rule 70 (sub_expr)


State 82

   90 arithmetic_expr: arithmetic_expr • '+' arithmetic_expr
   91                | arithmetic_expr • '-' arithmetic_expr
   92                | arithmetic_expr • '*' arithmetic_expr
   93                | arithmetic_expr • '/' arithmetic_expr
   94                | arithmetic_expr • '%' arithmetic_expr
   95                | '(' arithmetic_expr • ')'

    '+'  shift, and go to state 92
    '-'  shift, and go to state 93
    '*'  shift, and go to state 94
    '/'  shift, and go to state 95
    '%'  shift, and go to state 96
    ')'  shift, and go to state 102


State 83

   68 sub_expr: sub_expr LOGICAL_AND • sub_expr

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62

    sub_expr         go to state 103
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67


State 84

   69 sub_expr: sub_expr LOGICAL_OR • sub_expr

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62

    sub_expr         go to state 104
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67


State 85

   66 sub_expr: sub_expr LESS_THAN_EQ • sub_expr

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62

    sub_expr         go to state 105
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67


State 86

   67 sub_expr: sub_expr GR_THAN_EQ • sub_expr

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62

    sub_expr         go to state 106
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67


State 87

   64 sub_expr: sub_expr EQ • sub_expr

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62

    sub_expr         go to state 107
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67


State 88

   65 sub_expr: sub_expr NOT_EQ • sub_expr

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62

    sub_expr         go to state 108
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67


State 89

   63 sub_expr: sub_expr '<' • sub_expr

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62

    sub_expr         go to state 109
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67


State 90

   62 sub_expr: sub_expr '>' • sub_expr

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62

    sub_expr         go to state 110
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67


State 91

  101 array_index: IDENTIFIER '[' sub_expr ']' •

    $default  reduce using rule 101 (array_index)


State 92

   90 arithmetic_expr: arithmetic_expr '+' • arithmetic_expr

    IDENTIFIER    shift, and go to state 79
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    '-'           shift, and go to state 60
    '('           shift, and go to state 62

    arithmetic_expr  go to state 111
    constant         go to state 67


State 93

   91 arithmetic_expr: arithmetic_expr '-' • arithmetic_expr

    IDENTIFIER    shift, and go to state 79
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    '-'           shift, and go to state 60
    '('           shift, and go to state 62

    arithmetic_expr  go to state 112
    constant         go to state 67


State 94

   92 arithmetic_expr: arithmetic_expr '*' • arithmetic_expr

    IDENTIFIER    shift, and go to state 79
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    '-'           shift, and go to state 60
    '('           shift, and go to state 62

    arithmetic_expr  go to state 113
    constant         go to state 67


State 95

   93 arithmetic_expr: arithmetic_expr '/' • arithmetic_expr

    IDENTIFIER    shift, and go to state 79
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    '-'           shift, and go to state 60
    '('           shift, and go to state 62

    arithmetic_expr  go to state 114
    constant         go to state 67


State 96

   94 arithmetic_expr: arithmetic_expr '%' • arithmetic_expr

    IDENTIFIER    shift, and go to state 79
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    '-'           shift, and go to state 60
    '('           shift, and go to state 62

    arithmetic_expr  go to state 115
    constant         go to state 67


State 97

   30 arg: type • IDENTIFIER

    IDENTIFIER  shift, and go to state 116


State 98

    5 function: type IDENTIFIER '(' arg_list • ')' compound_stmt

    ')'  shift, and go to state 117


State 99

   26 arg_list: arguments •
   28 arguments: arguments • ',' arg

    ','  shift, and go to state 118

    $default  reduce using rule 26 (arg_list)


State 100

   29 arguments: arg •

    $default  reduce using rule 29 (arguments)


State 101

  102 function_call: IDENTIFIER '(' • parameter_list ')'
  103              | IDENTIFIER '(' • ')'

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    STRING        shift, and go to state 119
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62
    ')'           shift, and go to state 120

    sub_expr         go to state 121
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67
    parameter_list   go to state 122
    parameter        go to state 123


State 102

   95 arithmetic_expr: '(' arithmetic_expr ')' •

    $default  reduce using rule 95 (arithmetic_expr)


State 103

   62 sub_expr: sub_expr • '>' sub_expr
   63         | sub_expr • '<' sub_expr
   64         | sub_expr • EQ sub_expr
   65         | sub_expr • NOT_EQ sub_expr
   66         | sub_expr • LESS_THAN_EQ sub_expr
   67         | sub_expr • GR_THAN_EQ sub_expr
   68         | sub_expr • LOGICAL_AND sub_expr
   68         | sub_expr LOGICAL_AND sub_expr •
   69         | sub_expr • LOGICAL_OR sub_expr

    LESS_THAN_EQ  shift, and go to state 85
    GR_THAN_EQ    shift, and go to state 86
    EQ            shift, and go to state 87
    NOT_EQ        shift, and go to state 88
    '<'           shift, and go to state 89
    '>'           shift, and go to state 90

    $default  reduce using rule 68 (sub_expr)


State 104

   62 sub_expr: sub_expr • '>' sub_expr
   63         | sub_expr • '<' sub_expr
   64         | sub_expr • EQ sub_expr
   65         | sub_expr • NOT_EQ sub_expr
   66         | sub_expr • LESS_THAN_EQ sub_expr
   67         | sub_expr • GR_THAN_EQ sub_expr
   68         | sub_expr • LOGICAL_AND sub_expr
   69         | sub_expr • LOGICAL_OR sub_expr
   69         | sub_expr LOGICAL_OR sub_expr •

    LOGICAL_AND   shift, and go to state 83
    LESS_THAN_EQ  shift, and go to state 85
    GR_THAN_EQ    shift, and go to state 86
    EQ            shift, and go to state 87
    NOT_EQ        shift, and go to state 88
    '<'           shift, and go to state 89
    '>'           shift, and go to state 90

    $default  reduce using rule 69 (sub_expr)


State 105

   62 sub_expr: sub_expr • '>' sub_expr
   63         | sub_expr • '<' sub_expr
   64         | sub_expr • EQ sub_expr
   65         | sub_expr • NOT_EQ sub_expr
   66         | sub_expr • LESS_THAN_EQ sub_expr
   66         | sub_expr LESS_THAN_EQ sub_expr •
   67         | sub_expr • GR_THAN_EQ sub_expr
   68         | sub_expr • LOGICAL_AND sub_expr
   69         | sub_expr • LOGICAL_OR sub_expr

    $default  reduce using rule 66 (sub_expr)


State 106

   62 sub_expr: sub_expr • '>' sub_expr
   63         | sub_expr • '<' sub_expr
   64         | sub_expr • EQ sub_expr
   65         | sub_expr • NOT_EQ sub_expr
   66         | sub_expr • LESS_THAN_EQ sub_expr
   67         | sub_expr • GR_THAN_EQ sub_expr
   67         | sub_expr GR_THAN_EQ sub_expr •
   68         | sub_expr • LOGICAL_AND sub_expr
   69         | sub_expr • LOGICAL_OR sub_expr

    $default  reduce using rule 67 (sub_expr)


State 107

   62 sub_expr: sub_expr • '>' sub_expr
   63         | sub_expr • '<' sub_expr
   64         | sub_expr • EQ sub_expr
   64         | sub_expr EQ sub_expr •
   65         | sub_expr • NOT_EQ sub_expr
   66         | sub_expr • LESS_THAN_EQ sub_expr
   67         | sub_expr • GR_THAN_EQ sub_expr
   68         | sub_expr • LOGICAL_AND sub_expr
   69         | sub_expr • LOGICAL_OR sub_expr

    LESS_THAN_EQ  shift, and go to state 85
    GR_THAN_EQ    shift, and go to state 86
    '<'           shift, and go to state 89
    '>'           shift, and go to state 90

    $default  reduce using rule 64 (sub_expr)


State 108

   62 sub_expr: sub_expr • '>' sub_expr
   63         | sub_expr • '<' sub_expr
   64         | sub_expr • EQ sub_expr
   65         | sub_expr • NOT_EQ sub_expr
   65         | sub_expr NOT_EQ sub_expr •
   66         | sub_expr • LESS_THAN_EQ sub_expr
   67         | sub_expr • GR_THAN_EQ sub_expr
   68         | sub_expr • LOGICAL_AND sub_expr
   69         | sub_expr • LOGICAL_OR sub_expr

    LESS_THAN_EQ  shift, and go to state 85
    GR_THAN_EQ    shift, and go to state 86
    '<'           shift, and go to state 89
    '>'           shift, and go to state 90

    $default  reduce using rule 65 (sub_expr)


State 109

   62 sub_expr: sub_expr • '>' sub_expr
   63         | sub_expr • '<' sub_expr
   63         | sub_expr '<' sub_expr •
   64         | sub_expr • EQ sub_expr
   65         | sub_expr • NOT_EQ sub_expr
   66         | sub_expr • LESS_THAN_EQ sub_expr
   67         | sub_expr • GR_THAN_EQ sub_expr
   68         | sub_expr • LOGICAL_AND sub_expr
   69         | sub_expr • LOGICAL_OR sub_expr

    $default  reduce using rule 63 (sub_expr)


State 110

   62 sub_expr: sub_expr • '>' sub_expr
   62         | sub_expr '>' sub_expr •
   63         | sub_expr • '<' sub_expr
   64         | sub_expr • EQ sub_expr
   65         | sub_expr • NOT_EQ sub_expr
   66         | sub_expr • LESS_THAN_EQ sub_expr
   67         | sub_expr • GR_THAN_EQ sub_expr
   68         | sub_expr • LOGICAL_AND sub_expr
   69         | sub_expr • LOGICAL_OR sub_expr

    $default  reduce using rule 62 (sub_expr)


State 111

   90 arithmetic_expr: arithmetic_expr • '+' arithmetic_expr
   90                | arithmetic_expr '+' arithmetic_expr •
   91                | arithmetic_expr • '-' arithmetic_expr
   92                | arithmetic_expr • '*' arithmetic_expr
   93                | arithmetic_expr • '/' arithmetic_expr
   94                | arithmetic_expr • '%' arithmetic_expr

    '*'  shift, and go to state 94
    '/'  shift, and go to state 95
    '%'  shift, and go to state 96

    $default  reduce using rule 90 (arithmetic_expr)


State 112

   90 arithmetic_expr: arithmetic_expr • '+' arithmetic_expr
   91                | arithmetic_expr • '-' arithmetic_expr
   91                | arithmetic_expr '-' arithmetic_expr •
   92                | arithmetic_expr • '*' arithmetic_expr
   93                | arithmetic_expr • '/' arithmetic_expr
   94                | arithmetic_expr • '%' arithmetic_expr

    '*'  shift, and go to state 94
    '/'  shift, and go to state 95
    '%'  shift, and go to state 96

    $default  reduce using rule 91 (arithmetic_expr)


State 113

   90 arithmetic_expr: arithmetic_expr • '+' arithmetic_expr
   91                | arithmetic_expr • '-' arithmetic_expr
   92                | arithmetic_expr • '*' arithmetic_expr
   92                | arithmetic_expr '*' arithmetic_expr •
   93                | arithmetic_expr • '/' arithmetic_expr
   94                | arithmetic_expr • '%' arithmetic_expr

    $default  reduce using rule 92 (arithmetic_expr)


State 114

   90 arithmetic_expr: arithmetic_expr • '+' arithmetic_expr
   91                | arithmetic_expr • '-' arithmetic_expr
   92                | arithmetic_expr • '*' arithmetic_expr
   93                | arithmetic_expr • '/' arithmetic_expr
   93                | arithmetic_expr '/' arithmetic_expr •
   94                | arithmetic_expr • '%' arithmetic_expr

    $default  reduce using rule 93 (arithmetic_expr)


State 115

   90 arithmetic_expr: arithmetic_expr • '+' arithmetic_expr
   91                | arithmetic_expr • '-' arithmetic_expr
   92                | arithmetic_expr • '*' arithmetic_expr
   93                | arithmetic_expr • '/' arithmetic_expr
   94                | arithmetic_expr • '%' arithmetic_expr
   94                | arithmetic_expr '%' arithmetic_expr •

    $default  reduce using rule 94 (arithmetic_expr)


State 116

   30 arg: type IDENTIFIER •

    $default  reduce using rule 30 (arg)


State 117

    5 function: type IDENTIFIER '(' arg_list ')' • compound_stmt

    '{'  shift, and go to state 124

    compound_stmt  go to state 125


State 118

   28 arguments: arguments ',' • arg

    SHORT      shift, and go to state 2
    INT        shift, and go to state 3
    LONG       shift, and go to state 4
    LONG_LONG  shift, and go to state 5
    FLOAT      shift, and go to state 6
    DOUBLE     shift, and go to state 7
    CHAR       shift, and go to state 8
    SIGNED     shift, and go to state 9
    UNSIGNED   shift, and go to state 10

    type       go to state 97
    data_type  go to state 17
    sign_spec  go to state 18
    type_spec  go to state 19
    arg        go to state 126


State 119

  107 parameter: STRING •

    $default  reduce using rule 107 (parameter)


State 120

  103 function_call: IDENTIFIER '(' ')' •

    $default  reduce using rule 103 (function_call)


State 121

   62 sub_expr: sub_expr • '>' sub_expr
   63         | sub_expr • '<' sub_expr
   64         | sub_expr • EQ sub_expr
   65         | sub_expr • NOT_EQ sub_expr
   66         | sub_expr • LESS_THAN_EQ sub_expr
   67         | sub_expr • GR_THAN_EQ sub_expr
   68         | sub_expr • LOGICAL_AND sub_expr
   69         | sub_expr • LOGICAL_OR sub_expr
  106 parameter: sub_expr •

    LOGICAL_AND   shift, and go to state 83
    LOGICAL_OR    shift, and go to state 84
    LESS_THAN_EQ  shift, and go to state 85
    GR_THAN_EQ    shift, and go to state 86
    EQ            shift, and go to state 87
    NOT_EQ        shift, and go to state 88
    '<'           shift, and go to state 89
    '>'           shift, and go to state 90

    $default  reduce using rule 106 (parameter)


State 122

  102 function_call: IDENTIFIER '(' parameter_list • ')'
  104 parameter_list: parameter_list • ',' parameter

    ','  shift, and go to state 127
    ')'  shift, and go to state 128


State 123

  105 parameter_list: parameter •

    $default  reduce using rule 105 (parameter_list)


State 124

   33 compound_stmt: '{' • statements '}'

    $default  reduce using rule 35 (statements)

    statements  go to state 129


State 125

    5 function: type IDENTIFIER '(' arg_list ')' compound_stmt •

    $default  reduce using rule 5 (function)


State 126

   28 arguments: arguments ',' arg •

    $default  reduce using rule 28 (arguments)


State 127

  104 parameter_list: parameter_list ',' • parameter

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    STRING        shift, and go to state 119
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62

    sub_expr         go to state 121
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67
    parameter        go to state 130


State 128

  102 function_call: IDENTIFIER '(' parameter_list ')' •

    $default  reduce using rule 102 (function_call)


State 129

   33 compound_stmt: '{' statements • '}'
   34 statements: statements • stmt

    IDENTIFIER  shift, and go to state 131
    SHORT       shift, and go to state 2
    INT         shift, and go to state 3
    LONG        shift, and go to state 4
    LONG_LONG   shift, and go to state 5
    FLOAT       shift, and go to state 6
    DOUBLE      shift, and go to state 7
    CHAR        shift, and go to state 8
    SIGNED      shift, and go to state 9
    UNSIGNED    shift, and go to state 10
    IF          shift, and go to state 132
    FOR         shift, and go to state 133
    WHILE       shift, and go to state 134
    CONTINUE    shift, and go to state 135
    BREAK       shift, and go to state 136
    RETURN      shift, and go to state 137
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12
    '{'         shift, and go to state 124
    '}'         shift, and go to state 138

    type              go to state 139
    data_type         go to state 17
    sign_spec         go to state 18
    type_spec         go to state 19
    stmt              go to state 140
    compound_stmt     go to state 141
    single_stmt       go to state 142
    for_loop          go to state 143
    if_block          go to state 144
    while_loop        go to state 145
    declaration       go to state 146
    declaration_list  go to state 21
    sub_decl          go to state 22
    assignment_expr   go to state 23
    unary_expr        go to state 24
    lhs               go to state 25
    array_index       go to state 26
    function_call     go to state 147


State 130

  104 parameter_list: parameter_list ',' parameter •

    $default  reduce using rule 104 (parameter_list)


State 131

   56 sub_decl: IDENTIFIER •
   83 lhs: IDENTIFIER •
  101 array_index: IDENTIFIER • '[' sub_expr ']'
  102 function_call: IDENTIFIER • '(' parameter_list ')'
  103              | IDENTIFIER • '(' ')'

    '('  shift, and go to state 101
    '['  shift, and go to state 27

    ','       reduce using rule 56 (sub_decl)
    ';'       reduce using rule 56 (sub_decl)
    $default  reduce using rule 83 (lhs)


State 132

   47 if_block: IF • '(' expression ')' stmt
   48         | IF • '(' expression ')' stmt ELSE stmt

    '('  shift, and go to state 148


State 133

   45 for_loop: FOR • '(' expression_stmt expression_stmt ')' stmt
   46         | FOR • '(' expression_stmt expression_stmt expression ')' stmt

    '('  shift, and go to state 149


State 134

   49 while_loop: WHILE • '(' expression ')' stmt

    '('  shift, and go to state 150


State 135

   42 single_stmt: CONTINUE • ';'

    ';'  shift, and go to state 151


State 136

   43 single_stmt: BREAK • ';'

    ';'  shift, and go to state 152


State 137

   41 single_stmt: RETURN • ';'
   44            | RETURN • sub_expr ';'

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62
    ';'           shift, and go to state 153

    sub_expr         go to state 154
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67


State 138

   33 compound_stmt: '{' statements '}' •

    $default  reduce using rule 33 (compound_stmt)


State 139

   50 declaration: type • declaration_list ';'

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12

    declaration_list  go to state 39
    sub_decl          go to state 22
    assignment_expr   go to state 23
    unary_expr        go to state 40
    lhs               go to state 25
    array_index       go to state 26


State 140

   34 statements: statements stmt •

    $default  reduce using rule 34 (statements)


State 141

   31 stmt: compound_stmt •

    $default  reduce using rule 31 (stmt)


State 142

   32 stmt: single_stmt •

    $default  reduce using rule 32 (stmt)


State 143

   37 single_stmt: for_loop •

    $default  reduce using rule 37 (single_stmt)


State 144

   36 single_stmt: if_block •

    $default  reduce using rule 36 (single_stmt)


State 145

   38 single_stmt: while_loop •

    $default  reduce using rule 38 (single_stmt)


State 146

   39 single_stmt: declaration •

    $default  reduce using rule 39 (single_stmt)


State 147

   40 single_stmt: function_call • ';'

    ';'  shift, and go to state 155


State 148

   47 if_block: IF '(' • expression ')' stmt
   48         | IF '(' • expression ')' stmt ELSE stmt

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62

    expression       go to state 156
    sub_expr         go to state 157
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67


State 149

   45 for_loop: FOR '(' • expression_stmt expression_stmt ')' stmt
   46         | FOR '(' • expression_stmt expression_stmt expression ')' stmt

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62
    ';'           shift, and go to state 158

    expression_stmt  go to state 159
    expression       go to state 160
    sub_expr         go to state 157
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67


State 150

   49 while_loop: WHILE '(' • expression ')' stmt

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62

    expression       go to state 161
    sub_expr         go to state 157
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67


State 151

   42 single_stmt: CONTINUE ';' •

    $default  reduce using rule 42 (single_stmt)


State 152

   43 single_stmt: BREAK ';' •

    $default  reduce using rule 43 (single_stmt)


State 153

   41 single_stmt: RETURN ';' •

    $default  reduce using rule 41 (single_stmt)


State 154

   44 single_stmt: RETURN sub_expr • ';'
   62 sub_expr: sub_expr • '>' sub_expr
   63         | sub_expr • '<' sub_expr
   64         | sub_expr • EQ sub_expr
   65         | sub_expr • NOT_EQ sub_expr
   66         | sub_expr • LESS_THAN_EQ sub_expr
   67         | sub_expr • GR_THAN_EQ sub_expr
   68         | sub_expr • LOGICAL_AND sub_expr
   69         | sub_expr • LOGICAL_OR sub_expr

    LOGICAL_AND   shift, and go to state 83
    LOGICAL_OR    shift, and go to state 84
    LESS_THAN_EQ  shift, and go to state 85
    GR_THAN_EQ    shift, and go to state 86
    EQ            shift, and go to state 87
    NOT_EQ        shift, and go to state 88
    '<'           shift, and go to state 89
    '>'           shift, and go to state 90
    ';'           shift, and go to state 162


State 155

   40 single_stmt: function_call ';' •

    $default  reduce using rule 40 (single_stmt)


State 156

   47 if_block: IF '(' expression • ')' stmt
   48         | IF '(' expression • ')' stmt ELSE stmt
   60 expression: expression • ',' sub_expr

    ','  shift, and go to state 163
    ')'  shift, and go to state 164


State 157

   61 expression: sub_expr •
   62 sub_expr: sub_expr • '>' sub_expr
   63         | sub_expr • '<' sub_expr
   64         | sub_expr • EQ sub_expr
   65         | sub_expr • NOT_EQ sub_expr
   66         | sub_expr • LESS_THAN_EQ sub_expr
   67         | sub_expr • GR_THAN_EQ sub_expr
   68         | sub_expr • LOGICAL_AND sub_expr
   69         | sub_expr • LOGICAL_OR sub_expr

    LOGICAL_AND   shift, and go to state 83
    LOGICAL_OR    shift, and go to state 84
    LESS_THAN_EQ  shift, and go to state 85
    GR_THAN_EQ    shift, and go to state 86
    EQ            shift, and go to state 87
    NOT_EQ        shift, and go to state 88
    '<'           shift, and go to state 89
    '>'           shift, and go to state 90

    $default  reduce using rule 61 (expression)


State 158

   59 expression_stmt: ';' •

    $default  reduce using rule 59 (expression_stmt)


State 159

   45 for_loop: FOR '(' expression_stmt • expression_stmt ')' stmt
   46         | FOR '(' expression_stmt • expression_stmt expression ')' stmt

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62
    ';'           shift, and go to state 158

    expression_stmt  go to state 165
    expression       go to state 160
    sub_expr         go to state 157
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67


State 160

   58 expression_stmt: expression • ';'
   60 expression: expression • ',' sub_expr

    ','  shift, and go to state 163
    ';'  shift, and go to state 166


State 161

   49 while_loop: WHILE '(' expression • ')' stmt
   60 expression: expression • ',' sub_expr

    ','  shift, and go to state 163
    ')'  shift, and go to state 167


State 162

   44 single_stmt: RETURN sub_expr ';' •

    $default  reduce using rule 44 (single_stmt)


State 163

   60 expression: expression ',' • sub_expr

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62

    sub_expr         go to state 168
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67


State 164

   47 if_block: IF '(' expression ')' • stmt
   48         | IF '(' expression ')' • stmt ELSE stmt

    IDENTIFIER  shift, and go to state 131
    SHORT       shift, and go to state 2
    INT         shift, and go to state 3
    LONG        shift, and go to state 4
    LONG_LONG   shift, and go to state 5
    FLOAT       shift, and go to state 6
    DOUBLE      shift, and go to state 7
    CHAR        shift, and go to state 8
    SIGNED      shift, and go to state 9
    UNSIGNED    shift, and go to state 10
    IF          shift, and go to state 132
    FOR         shift, and go to state 133
    WHILE       shift, and go to state 134
    CONTINUE    shift, and go to state 135
    BREAK       shift, and go to state 136
    RETURN      shift, and go to state 137
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12
    '{'         shift, and go to state 124

    type              go to state 139
    data_type         go to state 17
    sign_spec         go to state 18
    type_spec         go to state 19
    stmt              go to state 169
    compound_stmt     go to state 141
    single_stmt       go to state 142
    for_loop          go to state 143
    if_block          go to state 144
    while_loop        go to state 145
    declaration       go to state 146
    declaration_list  go to state 21
    sub_decl          go to state 22
    assignment_expr   go to state 23
    unary_expr        go to state 24
    lhs               go to state 25
    array_index       go to state 26
    function_call     go to state 147


State 165

   45 for_loop: FOR '(' expression_stmt expression_stmt • ')' stmt
   46         | FOR '(' expression_stmt expression_stmt • expression ')' stmt

    IDENTIFIER    shift, and go to state 57
    DEC_CONSTANT  shift, and go to state 58
    HEX_CONSTANT  shift, and go to state 59
    INCREMENT     shift, and go to state 11
    DECREMENT     shift, and go to state 12
    '-'           shift, and go to state 60
    '!'           shift, and go to state 61
    '('           shift, and go to state 62
    ')'           shift, and go to state 170

    expression       go to state 171
    sub_expr         go to state 157
    assignment_expr  go to state 64
    unary_expr       go to state 65
    lhs              go to state 25
    arithmetic_expr  go to state 66
    constant         go to state 67


State 166

   58 expression_stmt: expression ';' •

    $default  reduce using rule 58 (expression_stmt)


State 167

   49 while_loop: WHILE '(' expression ')' • stmt

    IDENTIFIER  shift, and go to state 131
    SHORT       shift, and go to state 2
    INT         shift, and go to state 3
    LONG        shift, and go to state 4
    LONG_LONG   shift, and go to state 5
    FLOAT       shift, and go to state 6
    DOUBLE      shift, and go to state 7
    CHAR        shift, and go to state 8
    SIGNED      shift, and go to state 9
    UNSIGNED    shift, and go to state 10
    IF          shift, and go to state 132
    FOR         shift, and go to state 133
    WHILE       shift, and go to state 134
    CONTINUE    shift, and go to state 135
    BREAK       shift, and go to state 136
    RETURN      shift, and go to state 137
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12
    '{'         shift, and go to state 124

    type              go to state 139
    data_type         go to state 17
    sign_spec         go to state 18
    type_spec         go to state 19
    stmt              go to state 172
    compound_stmt     go to state 141
    single_stmt       go to state 142
    for_loop          go to state 143
    if_block          go to state 144
    while_loop        go to state 145
    declaration       go to state 146
    declaration_list  go to state 21
    sub_decl          go to state 22
    assignment_expr   go to state 23
    unary_expr        go to state 24
    lhs               go to state 25
    array_index       go to state 26
    function_call     go to state 147


State 168

   60 expression: expression ',' sub_expr •
   62 sub_expr: sub_expr • '>' sub_expr
   63         | sub_expr • '<' sub_expr
   64         | sub_expr • EQ sub_expr
   65         | sub_expr • NOT_EQ sub_expr
   66         | sub_expr • LESS_THAN_EQ sub_expr
   67         | sub_expr • GR_THAN_EQ sub_expr
   68         | sub_expr • LOGICAL_AND sub_expr
   69         | sub_expr • LOGICAL_OR sub_expr

    LOGICAL_AND   shift, and go to state 83
    LOGICAL_OR    shift, and go to state 84
    LESS_THAN_EQ  shift, and go to state 85
    GR_THAN_EQ    shift, and go to state 86
    EQ            shift, and go to state 87
    NOT_EQ        shift, and go to state 88
    '<'           shift, and go to state 89
    '>'           shift, and go to state 90

    $default  reduce using rule 60 (expression)


State 169

   47 if_block: IF '(' expression ')' stmt •
   48         | IF '(' expression ')' stmt • ELSE stmt

    ELSE  shift, and go to state 173

    $default  reduce using rule 47 (if_block)


State 170

   45 for_loop: FOR '(' expression_stmt expression_stmt ')' • stmt

    IDENTIFIER  shift, and go to state 131
    SHORT       shift, and go to state 2
    INT         shift, and go to state 3
    LONG        shift, and go to state 4
    LONG_LONG   shift, and go to state 5
    FLOAT       shift, and go to state 6
    DOUBLE      shift, and go to state 7
    CHAR        shift, and go to state 8
    SIGNED      shift, and go to state 9
    UNSIGNED    shift, and go to state 10
    IF          shift, and go to state 132
    FOR         shift, and go to state 133
    WHILE       shift, and go to state 134
    CONTINUE    shift, and go to state 135
    BREAK       shift, and go to state 136
    RETURN      shift, and go to state 137
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12
    '{'         shift, and go to state 124

    type              go to state 139
    data_type         go to state 17
    sign_spec         go to state 18
    type_spec         go to state 19
    stmt              go to state 174
    compound_stmt     go to state 141
    single_stmt       go to state 142
    for_loop          go to state 143
    if_block          go to state 144
    while_loop        go to state 145
    declaration       go to state 146
    declaration_list  go to state 21
    sub_decl          go to state 22
    assignment_expr   go to state 23
    unary_expr        go to state 24
    lhs               go to state 25
    array_index       go to state 26
    function_call     go to state 147


State 171

   46 for_loop: FOR '(' expression_stmt expression_stmt expression • ')' stmt
   60 expression: expression • ',' sub_expr

    ','  shift, and go to state 163
    ')'  shift, and go to state 175


State 172

   49 while_loop: WHILE '(' expression ')' stmt •

    $default  reduce using rule 49 (while_loop)


State 173

   48 if_block: IF '(' expression ')' stmt ELSE • stmt

    IDENTIFIER  shift, and go to state 131
    SHORT       shift, and go to state 2
    INT         shift, and go to state 3
    LONG        shift, and go to state 4
    LONG_LONG   shift, and go to state 5
    FLOAT       shift, and go to state 6
    DOUBLE      shift, and go to state 7
    CHAR        shift, and go to state 8
    SIGNED      shift, and go to state 9
    UNSIGNED    shift, and go to state 10
    IF          shift, and go to state 132
    FOR         shift, and go to state 133
    WHILE       shift, and go to state 134
    CONTINUE    shift, and go to state 135
    BREAK       shift, and go to state 136
    RETURN      shift, and go to state 137
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12
    '{'         shift, and go to state 124

    type              go to state 139
    data_type         go to state 17
    sign_spec         go to state 18
    type_spec         go to state 19
    stmt              go to state 176
    compound_stmt     go to state 141
    single_stmt       go to state 142
    for_loop          go to state 143
    if_block          go to state 144
    while_loop        go to state 145
    declaration       go to state 146
    declaration_list  go to state 21
    sub_decl          go to state 22
    assignment_expr   go to state 23
    unary_expr        go to state 24
    lhs               go to state 25
    array_index       go to state 26
    function_call     go to state 147


State 174

   45 for_loop: FOR '(' expression_stmt expression_stmt ')' stmt •

    $default  reduce using rule 45 (for_loop)


State 175

   46 for_loop: FOR '(' expression_stmt expression_stmt expression ')' • stmt

    IDENTIFIER  shift, and go to state 131
    SHORT       shift, and go to state 2
    INT         shift, and go to state 3
    LONG        shift, and go to state 4
    LONG_LONG   shift, and go to state 5
    FLOAT       shift, and go to state 6
    DOUBLE      shift, and go to state 7
    CHAR        shift, and go to state 8
    SIGNED      shift, and go to state 9
    UNSIGNED    shift, and go to state 10
    IF          shift, and go to state 132
    FOR         shift, and go to state 133
    WHILE       shift, and go to state 134
    CONTINUE    shift, and go to state 135
    BREAK       shift, and go to state 136
    RETURN      shift, and go to state 137
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12
    '{'         shift, and go to state 124

    type              go to state 139
    data_type         go to state 17
    sign_spec         go to state 18
    type_spec         go to state 19
    stmt              go to state 177
    compound_stmt     go to state 141
    single_stmt       go to state 142
    for_loop          go to state 143
    if_block          go to state 144
    while_loop        go to state 145
    declaration       go to state 146
    declaration_list  go to state 21
    sub_decl          go to state 22
    assignment_expr   go to state 23
    unary_expr        go to state 24
    lhs               go to state 25
    array_index       go to state 26
    function_call     go to state 147


State 176

   48 if_block: IF '(' expression ')' stmt ELSE stmt •

    $default  reduce using rule 48 (if_block)


State 177

   46 for_loop: FOR '(' expression_stmt expression_stmt expression ')' stmt •

    $default  reduce using rule 46 (for_loop)
